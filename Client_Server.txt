1) HTTP.
- stands for the hypertext transfer protocol
- uses two kinds of messages: requests and responses
- requests are generated by web browser at the client-side as plaintext and use different types of methods to send it to the server
- after a server receives the HTTP request, it will generate an HTTP response and send it back to the client
- HTTP is not an encrypted protocol, and it sends requests and responses in plaintext
- HTTP is an OSI application layer protocol
- HTTP uses port: 80

2) HTTPS.
- stands for hypertext transfer protocol secure
- uses TLS protocol and SSL certificate
- is an OSI transport layer protocol
- HTTPS uses port: 443

3) HTTP methods:
CRUD operations (Create, Read, Update, Delete)
GET - uses to request data from server (sent in URL)
POST - uses to send data to a server to create a new resource (sent in the request body)
PUT - uses to send data to a server to update an already existing resource or create a new one if the existing resource hasn't been found
PATCH - uses to send data to a server to update a particular field in the resource (ex: changing your name in Facebook profile)
DELETE - uses to delete a specified resource from the server

4) Idempotent methods:
Idempotent methods are methods that give the same result after multiple requests.
- GET, PUT, DELETE
Not idempotent methods:
- POST, PATCH

5) Safe methods.
Safe methods are methods that don't change the server state. Uses to retrieve data
- GET, HEAD, OPTIONS, TRACE

6) Status codes.
- 100's are informational
- 200's success
- 300's redirection
- 400's client-side errors
- 500's server-side errors

7) Browser engine.
A browser engine is a core part of every browser that allows a user to use a web page through a graphical interface.
It transforms HTML, CSS, and JS to the format that user sees on the screen.

Engines: FireFox - GECO. Chrome, Edge & Opera - Blink. Safari - WebKit.

8) API.
- API stands for Application Programming Interface.
- Local API allows two systems to interact with each other.
- Remote API It is a set of rules or contract that explains how client and server should communicate with each other. 

9) Endpoint.
Endpoint is a place where two applications are interacts with each other. It is an URL for which I make a request and where I get a response from.

10) URL (URI, URL, URN).
- URI - Uniform Resource Identifier - is a superset of URL and URN
- URL - Uniform Resource Locator: searching finds the source by its location
- URN - Uniform Resource Name: searching finds the source by its name

11) Identification, Authentication, Authorization. 
- Identification - it is a process when a user claims his name/introduce himself. (ex. user provides his name at the login form)
- Authentication - it is a process to identify a user as the person who he claims to be (ex. user provides password at the login form to prove his name)
- Authorization - is a process when the system gives a user access to a certain source (webpage) with certain rights (ex. to read, change, upload, download, etc.)
(system gives access to the subject to interact with the object)

12) IP.
- IP stands for Internet Protocol.
- IP address is assigned to each device to identify it in the given network.
- It contains 4 digits separated by dots, each digit can range from 0 to 255. 4 octets = 32bit; 11111111.11111111.11111111.11111111 = 255.255.255.255

13) DNS.
- Stands for Domain Name System
- Client sent a request to the DNS server (GET me https://youtube.com) if the DNS server has it in his cache it sends the website's IP address back to the client,
then the client's browser send the request to IP address he has received from DNS server and get a response from this website.

14) Ports.
- is a specific number from 0 to 65535 which is assigned to a specific process o service to transfer data. 
- the device can use one network connection to handle multiple different outgoing and incoming requests, and it's assigned to each of these requests.
- some of the ports preassigned (ex. HTTP - 80, HTTPS - 443, to send emails via Outlook Express - 25, etc.)

15) OSI Layers.
- Hardware layer: physical layer, data link layer, network layer
- Heart of OSI: transport layer
- Software layer: session layer, presentation layer, application layer

16) HTTP Requests Headers.
- HTTP headers are used in HTTP requests.to provide information to the server so it would know how to send a response to the client.
- General Headers contain fields like: Request URL, Request Method, Status Code, Remote Address (IP and port), Referrer Policy;
- Request Headers contains fields like: scheme: https, user-agent: Mozilla/1.0 (KHTML) Chrome/10 Safari, metod: GET, accept: */*, etc.
- Responce Headers contains fields like: content-type: json; text/html, date: wed, 08 jun 2022, lokation: https://sdgwdgsdgs, etc.